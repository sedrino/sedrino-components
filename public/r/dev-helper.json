{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dev-helper",
  "type": "registry:component",
  "description": "A development helper component for forms.",
  "files": [
    {
      "path": "app/components/form-fields/dev-helper.tsx",
      "content": "import { useState } from \"react\";\r\nimport { Code } from \"lucide-react\";\r\n\r\nimport { useFormContext } from \"@/components/form-fields/form-context\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Collapsible,\r\n  CollapsibleContent,\r\n  CollapsibleTrigger,\r\n} from \"@/components/ui/collapsible\";\r\n\r\nexport function DevHelper() {\r\n  const form = useFormContext();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <Collapsible\r\n      open={isOpen}\r\n      onOpenChange={setIsOpen}\r\n      className=\"fixed bottom-4 right-4 z-50 w-80 overflow-hidden rounded-lg border border-slate-700 bg-slate-900 text-white shadow-lg\"\r\n    >\r\n      <CollapsibleTrigger asChild>\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          className=\"flex w-full items-center justify-between p-2 text-xs hover:bg-slate-800\"\r\n        >\r\n          <div className=\"flex items-center gap-2\">\r\n            <Code size={14} />\r\n            <span>Form Dev Tools</span>\r\n          </div>\r\n          <form.Subscribe\r\n            selector={(state) => ({\r\n              isValid: state.isValid,\r\n              isDirty: state.isDirty,\r\n              isSubmitting: state.isSubmitting,\r\n            })}\r\n          >\r\n            {(value) => (\r\n              <div className=\"flex gap-1\">\r\n                <Badge\r\n                  variant={value.isValid ? \"default\" : \"destructive\"}\r\n                  className=\"h-4 px-1 py-0 text-[10px]\"\r\n                >\r\n                  {value.isValid ? \"valid\" : \"invalid\"}\r\n                </Badge>\r\n                {value.isDirty && (\r\n                  <Badge\r\n                    variant=\"secondary\"\r\n                    className=\"h-4 px-1 py-0 text-[10px]\"\r\n                  >\r\n                    dirty\r\n                  </Badge>\r\n                )}\r\n                {value.isSubmitting && (\r\n                  <Badge\r\n                    variant=\"outline\"\r\n                    className=\"h-4 animate-pulse px-1 py-0 text-[10px]\"\r\n                  >\r\n                    submitting\r\n                  </Badge>\r\n                )}\r\n              </div>\r\n            )}\r\n          </form.Subscribe>\r\n        </Button>\r\n      </CollapsibleTrigger>\r\n      <CollapsibleContent>\r\n        <div className=\"max-h-96 overflow-auto p-2 text-xs\">\r\n          <form.Subscribe\r\n            selector={(state) => ({\r\n              errors: state.errors,\r\n              errorMap: state.errorMap,\r\n              isValid: state.isValid,\r\n              canSubmit: state.canSubmit,\r\n              isDirty: state.isDirty,\r\n              isPristine: state.isPristine,\r\n              isTouched: state.isTouched,\r\n              isSubmitted: state.isSubmitted,\r\n              isSubmitSuccessful: state.isSubmitSuccessful,\r\n              isSubmitting: state.isSubmitting,\r\n            })}\r\n          >\r\n            {(value) => (\r\n              <div className=\"space-y-3\">\r\n                <div className=\"grid grid-cols-2 gap-1\">\r\n                  <div className=\"font-semibold\">Status</div>\r\n                  <div className=\"flex flex-wrap gap-1\">\r\n                    <Badge\r\n                      variant={value.isValid ? \"default\" : \"destructive\"}\r\n                      className=\"text-[10px]\"\r\n                    >\r\n                      {value.isValid ? \"Valid\" : \"Invalid\"}\r\n                    </Badge>\r\n                    {value.isDirty && (\r\n                      <Badge variant=\"secondary\" className=\"text-[10px]\">\r\n                        Dirty\r\n                      </Badge>\r\n                    )}\r\n                    {value.isPristine && (\r\n                      <Badge variant=\"secondary\" className=\"text-[10px]\">\r\n                        Pristine\r\n                      </Badge>\r\n                    )}\r\n                    {value.isTouched && (\r\n                      <Badge variant=\"secondary\" className=\"text-[10px]\">\r\n                        Touched\r\n                      </Badge>\r\n                    )}\r\n                    {value.isSubmitted && (\r\n                      <Badge variant=\"secondary\" className=\"text-[10px]\">\r\n                        Submitted\r\n                      </Badge>\r\n                    )}\r\n                    {value.isSubmitSuccessful && (\r\n                      <Badge variant=\"default\" className=\"text-[10px]\">\r\n                        Submit Success\r\n                      </Badge>\r\n                    )}\r\n                    {value.isSubmitting && (\r\n                      <Badge\r\n                        variant=\"outline\"\r\n                        className=\"animate-pulse text-[10px]\"\r\n                      >\r\n                        Submitting\r\n                      </Badge>\r\n                    )}\r\n                    {value.canSubmit && (\r\n                      <Badge variant=\"default\" className=\"text-[10px]\">\r\n                        Can Submit\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                {Object.keys(value.errorMap).length > 0 && (\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"font-semibold text-destructive\">\r\n                      Errors:\r\n                    </div>\r\n                    {Object.entries(value.errorMap).map(\r\n                      ([eventType, fieldErrors]) => (\r\n                        <div\r\n                          key={eventType}\r\n                          className=\"rounded border border-destructive/30 bg-destructive/10 p-2\"\r\n                        >\r\n                          <div className=\"font-medium\">{eventType}:</div>\r\n                          {fieldErrors &&\r\n                            Object.entries(fieldErrors || {}).map(\r\n                              ([fieldName, errors]) => (\r\n                                <div\r\n                                  key={fieldName}\r\n                                  className=\"mt-2 border-t border-destructive/20 pt-2\"\r\n                                >\r\n                                  <div className=\"text-xs font-medium\">\r\n                                    Field: {fieldName}\r\n                                  </div>\r\n                                  <div className=\"text-[10px] text-destructive\">\r\n                                    {/* @ts-ignore */}\r\n                                    {typeof errors === \"string\" ? (\r\n                                      errors\r\n                                    ) : // @ts-ignore\r\n                                    errors?.message ? (\r\n                                      // @ts-ignore\r\n                                      errors.message\r\n                                    ) : Array.isArray(errors) ? (\r\n                                      <ul className=\"list-disc pl-4\">\r\n                                        {errors.map((err, i) => (\r\n                                          <li key={i}>\r\n                                            {err.message ||\r\n                                              `${err.code}: Expected ${err.expected}, received ${err.received}${err.path ? ` at ${err.path.join(\".\")}` : \"\"}`}\r\n                                          </li>\r\n                                        ))}\r\n                                      </ul>\r\n                                    ) : (\r\n                                      JSON.stringify(errors)\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              ),\r\n                            )}\r\n                        </div>\r\n                      ),\r\n                    )}\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"pt-2\">\r\n                  <details>\r\n                    <summary className=\"cursor-pointer text-[11px] text-slate-400\">\r\n                      Raw Form Data\r\n                    </summary>\r\n                    <pre className=\"mt-2 whitespace-pre-wrap break-words text-[10px] text-slate-300\">\r\n                      {JSON.stringify(value, null, 2)}\r\n                    </pre>\r\n                  </details>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </form.Subscribe>\r\n        </div>\r\n      </CollapsibleContent>\r\n    </Collapsible>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "app/components/form-fields/dev-helper.tsx"
    }
  ]
}