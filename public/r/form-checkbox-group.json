{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-checkbox-group",
  "type": "registry:component",
  "description": "A standalone checkbox group component.",
  "files": [
    {
      "path": "app/components/form/checkbox-group.tsx",
      "content": "import { HTMLAttributes, useEffect, useMemo, useState } from \"react\";\n\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { cn } from \"@/lib/utils\";\n\nimport { createValueMapsFromOptions, PrimitiveValueType } from \"./form-utils\";\n\nexport type Option<T extends PrimitiveValueType> = {\n  label: string;\n  value: T;\n};\n\nexport type FormCheckboxGroupProps<T extends PrimitiveValueType> =\n  HTMLAttributes<HTMLDivElement> & {\n    value: T[];\n    onChange: (value: T[]) => void;\n    onBlur?: () => void;\n    options: Option<T>[];\n    label?: string;\n    className?: string;\n    disabled?: boolean;\n    orientation?: \"horizontal\" | \"vertical\";\n  };\n\nexport function FormCheckboxGroup<T extends PrimitiveValueType>(\n  props: FormCheckboxGroupProps<T>,\n) {\n  const {\n    value,\n    onChange,\n    onBlur,\n    options,\n    label,\n    className,\n    disabled,\n    orientation = \"vertical\",\n    ...restProps\n  } = props;\n\n  const [selectedValues, setSelectedValues] = useState<T[]>([]);\n\n  // Create maps to convert between primitive values and string representations\n  const { valueToString, stringToValue } = useMemo(() => {\n    return createValueMapsFromOptions(options);\n  }, [options]);\n\n  // Keep the UI display in sync with the value\n  useEffect(() => {\n    setSelectedValues(value || []);\n  }, [value]);\n\n  const handleCheckedChange = (checked: boolean, optionValue: T) => {\n    let newValues: T[];\n\n    if (checked) {\n      newValues = [...selectedValues, optionValue];\n    } else {\n      // Using a loose equality check to handle things like 1 and \"1\"\n      newValues = selectedValues.filter((v) => v !== optionValue);\n    }\n\n    onChange(newValues);\n  };\n\n  // Helper to check if a value is in the selected values\n  const isValueSelected = (optionValue: T): boolean => {\n    return selectedValues.some((v) => v === optionValue);\n  };\n\n  return (\n    <div className={className} {...restProps}>\n      {label && <div className=\"mb-2 font-medium\">{label}</div>}\n      <div\n        className={cn(\n          orientation === \"vertical\"\n            ? \"flex flex-col space-y-2\"\n            : \"flex flex-row flex-wrap gap-4\",\n        )}\n      >\n        {options.map((option) => {\n          const stringValue =\n            valueToString.get(option.value) || String(option.value);\n          const id = `checkbox-${stringValue}`;\n          const isChecked = isValueSelected(option.value);\n\n          return (\n            <div key={stringValue} className=\"flex items-center space-x-2\">\n              <Checkbox\n                id={id}\n                checked={isChecked}\n                onCheckedChange={(checked) =>\n                  handleCheckedChange(!!checked, option.value)\n                }\n                disabled={disabled}\n                onBlur={onBlur}\n              />\n              <label\n                htmlFor={id}\n                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n              >\n                {option.label}\n              </label>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "app/components/form/checkbox-group.tsx"
    }
  ]
}