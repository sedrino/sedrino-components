{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-switch",
  "type": "registry:component",
  "description": "A standalone switch component.",
  "files": [
    {
      "path": "app/components/form/switch.tsx",
      "content": "import { HTMLAttributes, useEffect, useState } from \"react\";\n\nimport { Switch } from \"@/components/ui/switch\";\nimport { cn } from \"@/lib/utils\";\n\nimport { PrimitiveValueType } from \"./form-utils\";\n\nexport type FormSwitchProps<\n  TOnValue extends PrimitiveValueType = true,\n  TOffValue extends PrimitiveValueType = false,\n> = HTMLAttributes<HTMLDivElement> & {\n  value: TOnValue | TOffValue;\n  onChange: (value: TOnValue | TOffValue) => void;\n  onBlur?: () => void;\n  id?: string;\n  label?: string;\n  disabled?: boolean;\n  className?: string;\n  onValue?: TOnValue;\n  offValue?: TOffValue;\n  checked?: boolean;\n  onCheckedChange?: (checked: boolean) => void;\n};\n\nexport function FormSwitch<\n  TOnValue extends PrimitiveValueType = true,\n  TOffValue extends PrimitiveValueType = false,\n>(props: FormSwitchProps<TOnValue, TOffValue>) {\n  const {\n    value,\n    onChange,\n    onBlur,\n    id,\n    label,\n    disabled,\n    className,\n    onValue: propOnValue,\n    offValue: propOffValue,\n    checked: propChecked,\n    onCheckedChange,\n    ...restProps\n  } = props;\n  const [checked, setChecked] = useState<boolean>(false);\n\n  // Set default values for on/off if not provided\n  const onValue = propOnValue !== undefined ? propOnValue : (true as TOnValue);\n  const offValue =\n    propOffValue !== undefined ? propOffValue : (false as TOffValue);\n\n  // Keep the UI display in sync with the value\n  useEffect(() => {\n    // If propChecked is provided, use that for controlled behavior\n    if (propChecked !== undefined) {\n      setChecked(propChecked);\n    } else {\n      // Otherwise, determine checked state by comparing with onValue\n      setChecked(value === onValue);\n    }\n  }, [value, onValue, propChecked]);\n\n  const handleCheckedChange = (isChecked: boolean) => {\n    // If onCheckedChange is provided, call that (for controlled behavior)\n    if (onCheckedChange) {\n      onCheckedChange(isChecked);\n    } else {\n      // Otherwise, update the value based on checked state\n      onChange(isChecked ? onValue : offValue);\n    }\n  };\n\n  return (\n    <div\n      className={cn(\"flex items-center space-x-2\", className)}\n      {...restProps}\n    >\n      <Switch\n        id={id}\n        checked={checked}\n        onCheckedChange={handleCheckedChange}\n        disabled={disabled}\n        onBlur={onBlur}\n      />\n      {label && (\n        <label\n          htmlFor={id}\n          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n        >\n          {label}\n        </label>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "app/components/form/switch.tsx"
    }
  ]
}