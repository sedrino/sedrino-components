{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-text-field",
  "type": "registry:component",
  "description": "A standalone text input component.",
  "files": [
    {
      "path": "app/components/form/text-field.tsx",
      "content": "import { HTMLInputTypeAttribute, useEffect, useState } from \"react\";\n\nimport { Input } from \"@/components/ui/input\";\n\nexport type FormTextFieldBaseProps<T> = Omit<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  \"value\" | \"onChange\"\n> & {\n  value: T;\n  onChange: (value: T) => void;\n  className?: string;\n  id?: string;\n  disabled?: boolean;\n  autoFocus?: boolean;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  mask?: string;\n  maskChar?: string;\n};\n\nexport type FormStandardTextFieldProps = FormTextFieldBaseProps<string> & {\n  type?: \"text\" | \"email\" | \"password\" | \"tel\" | \"url\" | \"search\";\n};\n\nexport type FormNumberTextFieldProps = FormTextFieldBaseProps<number> & {\n  type: \"number\";\n};\n\nexport type FormTextNumberFieldProps = FormTextFieldBaseProps<number | null> & {\n  type: \"text-number\";\n};\n\nexport type FormTextFieldProps =\n  | FormStandardTextFieldProps\n  | FormNumberTextFieldProps\n  | FormTextNumberFieldProps;\n\nexport function FormTextField<T extends string | number | null>(\n  props: FormTextFieldBaseProps<T> & { type?: HTMLInputTypeAttribute },\n) {\n  const { value, onChange, mask, maskChar = \"_\", ...restProps } = props;\n  const [displayValue, setDisplayValue] = useState<string>(\"\");\n\n  const finalType: HTMLInputTypeAttribute =\n    props.type === \"text-number\" ? \"text\" : props.type || \"text\";\n\n  function unmaskInput(value: string): string {\n    if (!mask) return value;\n    const dividers = Array.from(\n      new Set(mask.split(\"\").filter((c) => c !== maskChar)),\n    );\n    return value\n      .split(\"\")\n      .filter((char) => !dividers.includes(char))\n      .join(\"\");\n  }\n\n  function formatValue(rawValue: string): string {\n    if (!mask) return rawValue;\n    let formatted = \"\";\n    let rawIndex = 0;\n    for (const maskCharItem of mask) {\n      if (maskCharItem === maskChar && rawIndex < rawValue.length) {\n        formatted += rawValue[rawIndex++];\n      } else if (maskCharItem !== maskChar && rawIndex <= rawValue.length) {\n        formatted += maskCharItem;\n      }\n    }\n    return formatted;\n  }\n\n  useEffect(() => {\n    if (value === null || value === undefined) {\n      setDisplayValue(\"\");\n      return;\n    }\n    if (typeof value === \"string\" && mask) {\n      setDisplayValue(formatValue(value));\n    } else {\n      setDisplayValue(String(value));\n    }\n  }, [value, mask]);\n\n  function handleKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (mask && e.key === \"Backspace\" && finalType === \"text\") {\n      const inputEl = e.currentTarget;\n      const cursorPos = inputEl.selectionStart;\n      if (cursorPos && cursorPos === inputEl.selectionEnd && cursorPos > 0) {\n        e.preventDefault();\n\n        let newCursorPos = cursorPos;\n        while (newCursorPos > 0 && mask[newCursorPos - 1] !== maskChar) {\n          newCursorPos--;\n        }\n\n        const rawValue = unmaskInput(displayValue);\n        const deletionIndex =\n          unmaskInput(displayValue.slice(0, newCursorPos)).length - 1;\n\n        if (deletionIndex >= 0) {\n          const updatedRawValue =\n            rawValue.slice(0, deletionIndex) +\n            rawValue.slice(deletionIndex + 1);\n          onChange(updatedRawValue as T);\n          const newDisplayValue = formatValue(updatedRawValue);\n          setDisplayValue(newDisplayValue);\n          setTimeout(\n            () => inputEl.setSelectionRange(newCursorPos - 1, newCursorPos - 1),\n            0,\n          );\n        }\n      }\n    }\n    props.onKeyDown?.(e);\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const typedValue = e.target.value;\n\n    if (mask && finalType === \"text\") {\n      const raw = unmaskInput(typedValue);\n      onChange(raw as T);\n      setDisplayValue(formatValue(raw));\n      return;\n    }\n\n    if (props.type === \"number\") {\n      const numericValue = parseFloat(typedValue);\n      if (typedValue === \"\" || isNaN(numericValue)) return;\n      onChange(numericValue as T);\n      return;\n    }\n\n    if (props.type === \"text-number\") {\n      const numericValue = parseFloat(typedValue);\n      onChange(\n        (typedValue === \"\" || isNaN(numericValue) ? null : numericValue) as T,\n      );\n      return;\n    }\n\n    onChange(typedValue as T);\n  };\n\n  return (\n    <Input\n      {...restProps}\n      type={finalType}\n      value={displayValue}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n    />\n  );\n}\n",
      "type": "registry:component",
      "target": "app/components/form/text-field.tsx"
    }
  ]
}