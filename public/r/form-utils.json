{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-utils",
  "type": "registry:file",
  "description": "Utility functions for form components.",
  "files": [
    {
      "path": "app/components/form/form-utils.ts",
      "content": "/**\n * Utility functions and types for form components\n */\n\n// Define primitive types that our form components can work with\nexport type PrimitiveValueType = string | number | boolean | null | undefined;\n\n/**\n * Converts a primitive value to a safe string representation\n * \n * @param value - Any primitive value to convert\n * @returns A string representation that preserves the value type\n */\nexport function valueToString(value: PrimitiveValueType): string {\n  if (value === \"\") return \"__empty__\";\n  if (value === undefined) return \"__undefined__\";\n  if (value === null) return \"__null__\";\n  if (typeof value === \"number\" && isNaN(value)) return \"__NaN__\";\n  if (value === Infinity) return \"__Infinity__\";\n  if (value === -Infinity) return \"__-Infinity__\";\n  if (value === false) return \"__false__\";\n  if (value === true) return \"__true__\";\n  return String(value);\n}\n\n/**\n * Converts a string representation back to its original primitive value\n * \n * @param str - String representation of a primitive value\n * @returns The original primitive value\n */\nexport function stringToValue(str: string): PrimitiveValueType {\n  if (str === \"__empty__\") return \"\";\n  if (str === \"__undefined__\") return undefined;\n  if (str === \"__null__\") return null;\n  if (str === \"__NaN__\") return NaN;\n  if (str === \"__Infinity__\") return Infinity;\n  if (str === \"__-Infinity__\") return -Infinity;\n  if (str === \"__false__\") return false;\n  if (str === \"__true__\") return true;\n  \n  // Try to parse as number if it looks like one\n  if (/^-?\\d+(\\.\\d+)?$/.test(str)) {\n    return parseFloat(str);\n  }\n  \n  return str;\n}\n\n/**\n * Creates value conversion maps for a collection of values\n * \n * @param values - Array of primitive values to create conversion maps for\n * @returns Object containing maps for bidirectional conversion\n */\nexport function createValueMaps<T extends PrimitiveValueType>(values: T[]) {\n  const valueToStringMap = new Map<T, string>();\n  const stringToValueMap = new Map<string, T>();\n\n  values.forEach((value) => {\n    const strValue = valueToString(value);\n    valueToStringMap.set(value, strValue);\n    stringToValueMap.set(strValue, value);\n  });\n\n  return {\n    valueToString: valueToStringMap,\n    stringToValue: stringToValueMap\n  };\n}\n\n/**\n * Creates value conversion maps from option objects\n * \n * @param options - Array of option objects with value property\n * @returns Object containing maps for bidirectional conversion\n */\nexport function createValueMapsFromOptions<T extends PrimitiveValueType>(\n  options: Array<{ value: T } & Record<string, any>>\n) {\n  return createValueMaps(options.map(option => option.value));\n}",
      "type": "registry:file",
      "target": "app/components/form/form-utils.ts"
    }
  ]
}